{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation for GanttHelper Source code in 2022-python-gantt-chart/gantt_helper.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 class GanttHelper : def __init__ ( self , src : str , dir : Union [ str , bool ] = False , fname : Union [ str , bool ] = False , sort_by_start : bool = True , x_ticks_num : int = 10 , fig_size : tuple = ( 20 , 5 )) -> None : \"\"\"_summary_ Parameters ---------- src : str Toml file name, without filename extension dir : Union[str, bool], optional Ouput file directory, by default False fname : Union[str, bool], optional Ouput file name, by default False sort_by_start : bool, optional Sort data by their start date, by default True x_ticks_num : int, optional How many x ticks you want to display, by default 10 fig_size : tuple, optional Figure size, by default (20, 5) \"\"\" self . src = src self . dir = dir self . fname = fname self . sort_by_start = sort_by_start self . x_ticks_num = x_ticks_num self . fig_size = fig_size def plot ( self ) -> None : \"\"\"_summary_ Example: ------- ```python from gantt_helper import GanttHelper gh = GanttHelper('gantt', dir='Images', fname='Gannt', sort_by_start=True, x_ticks_num=10, fig_size=(20, 5)) gh.plot() ``` \"\"\" df , x_ticks_num = self . cleaned_dataframe_data , self . x_ticks_num plt . style . use ( 'fivethirtyeight' ) plt . rcParams [ 'font.sans-serif' ] = [ 'Microsoft JhengHei' ] fig , ax = plt . subplots ( 1 , figsize = self . fig_size ) ax . barh ( df . task , df . current_num , left = df . start_num , color = df . color ) ax . barh ( df . task , df . start_end , left = df . start_num , color = df . color , alpha = 0.5 ) for _ , row in df . iterrows (): ax . text ( row . end_num + df . start_end . max () * 0.01 , row . uid , f \" { int ( row . complete ) } %\" , va = 'center' ) step = ( df . end_num . max () - df . start_num . min ()) / x_ticks_num ax . set_xticks ( np . arange ( 0 , df . end_num . max (), step )) ax . set_xticklabels ( pd . date_range ( df . start . min (), df . end . max (), x_ticks_num ) . strftime ( \"%Y-%m- %d \" ), fontsize = 10 ) plt . title ( f ' { self . fname } ' ) if self . fname : plt . savefig ( self . output_path , bbox_inches = 'tight' ) @property def output_path ( self ): if self . dir : os . makedirs ( self . dir , exist_ok = True ) output_path = f ' { self . dir } / { self . fname } .png' else : output_path = f ' { self . fname } .png' return output_path @property def toml_data ( self ): \"\"\"_summary_ !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Format: ------- ```toml [1] task = 'A' start = 2018-06-27 end = 2018-06-22 complete = 55 ``` \"\"\" return toml . load ( f ' { self . src } .toml' ) @property def raw_dataframe_data ( self ): df = pd . DataFrame ( self . toml_data . values ()) if self . sort_by_start : df = df . sort_values ( by = 'start' ) df = df . reset_index ( drop = True ) return df @property def cleaned_dataframe_data ( self ): df = self . raw_dataframe_data def unique_task_id ( x ): l = df . task . unique () . tolist () return l . index ( x ) df [ 'start_num' ] = df . start - df . start . min () df [ 'start_end' ] = df . end - df . start df [ 'start_num' ] = df . start_num . astype ( 'timedelta64[D]' ) . astype ( int ) df [ 'start_end' ] = df . start_end . astype ( 'timedelta64[D]' ) . astype ( int ) df [ 'end_num' ] = df . start_num + df . start_end df [ 'current_num' ] = ( df . start_end * df . complete / 100 ) df [ 'color' ] = df . complete . apply ( GanttHelper . to_color ) df [ 'uid' ] = df . task . apply ( unique_task_id ) return df @staticmethod def to_color ( x ): if x == 100 : return ( 0.3 , 0.3 , 0.3 , 1 ) elif x < 100 and x > 60 : return ( 0 , 0.5 , 0.3 , x / 100 ) else : return ( 0.7 , 0 , 0 , 0.8 ) __init__ ( src , dir = False , fname = False , sort_by_start = True , x_ticks_num = 10 , fig_size = ( 20 , 5 )) summary Parameters: Name Type Description Default src str Toml file name, without filename extension required dir Union [ str , bool ], optional Ouput file directory, by default False False fname Union [ str , bool ], optional Ouput file name, by default False False sort_by_start bool , optional Sort data by their start date, by default True True x_ticks_num int , optional How many x ticks you want to display, by default 10 10 fig_size tuple , optional Figure size, by default (20, 5) (20, 5) Source code in 2022-python-gantt-chart/gantt_helper.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def __init__ ( self , src : str , dir : Union [ str , bool ] = False , fname : Union [ str , bool ] = False , sort_by_start : bool = True , x_ticks_num : int = 10 , fig_size : tuple = ( 20 , 5 )) -> None : \"\"\"_summary_ Parameters ---------- src : str Toml file name, without filename extension dir : Union[str, bool], optional Ouput file directory, by default False fname : Union[str, bool], optional Ouput file name, by default False sort_by_start : bool, optional Sort data by their start date, by default True x_ticks_num : int, optional How many x ticks you want to display, by default 10 fig_size : tuple, optional Figure size, by default (20, 5) \"\"\" self . src = src self . dir = dir self . fname = fname self . sort_by_start = sort_by_start self . x_ticks_num = x_ticks_num self . fig_size = fig_size plot () summary Example: from gantt_helper import GanttHelper gh = GanttHelper ( 'gantt' , dir = 'Images' , fname = 'Gannt' , sort_by_start = True , x_ticks_num = 10 , fig_size = ( 20 , 5 )) gh . plot () Source code in 2022-python-gantt-chart/gantt_helper.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def plot ( self ) -> None : \"\"\"_summary_ Example: ------- ```python from gantt_helper import GanttHelper gh = GanttHelper('gantt', dir='Images', fname='Gannt', sort_by_start=True, x_ticks_num=10, fig_size=(20, 5)) gh.plot() ``` \"\"\" df , x_ticks_num = self . cleaned_dataframe_data , self . x_ticks_num plt . style . use ( 'fivethirtyeight' ) plt . rcParams [ 'font.sans-serif' ] = [ 'Microsoft JhengHei' ] fig , ax = plt . subplots ( 1 , figsize = self . fig_size ) ax . barh ( df . task , df . current_num , left = df . start_num , color = df . color ) ax . barh ( df . task , df . start_end , left = df . start_num , color = df . color , alpha = 0.5 ) for _ , row in df . iterrows (): ax . text ( row . end_num + df . start_end . max () * 0.01 , row . uid , f \" { int ( row . complete ) } %\" , va = 'center' ) step = ( df . end_num . max () - df . start_num . min ()) / x_ticks_num ax . set_xticks ( np . arange ( 0 , df . end_num . max (), step )) ax . set_xticklabels ( pd . date_range ( df . start . min (), df . end . max (), x_ticks_num ) . strftime ( \"%Y-%m- %d \" ), fontsize = 10 ) plt . title ( f ' { self . fname } ' ) if self . fname : plt . savefig ( self . output_path , bbox_inches = 'tight' ) toml_data () property summary Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Format: [ 1 ] task = 'A' start = 2018-06-27 end = 2018-06-22 complete = 55 Source code in 2022-python-gantt-chart/gantt_helper.py 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 @property def toml_data ( self ): \"\"\"_summary_ !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Format: ------- ```toml [1] task = 'A' start = 2018-06-27 end = 2018-06-22 complete = 55 ``` \"\"\" return toml . load ( f ' { self . src } .toml' )","title":"Gantt"},{"location":"#documentation-for-gantthelper","text":"Source code in 2022-python-gantt-chart/gantt_helper.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 class GanttHelper : def __init__ ( self , src : str , dir : Union [ str , bool ] = False , fname : Union [ str , bool ] = False , sort_by_start : bool = True , x_ticks_num : int = 10 , fig_size : tuple = ( 20 , 5 )) -> None : \"\"\"_summary_ Parameters ---------- src : str Toml file name, without filename extension dir : Union[str, bool], optional Ouput file directory, by default False fname : Union[str, bool], optional Ouput file name, by default False sort_by_start : bool, optional Sort data by their start date, by default True x_ticks_num : int, optional How many x ticks you want to display, by default 10 fig_size : tuple, optional Figure size, by default (20, 5) \"\"\" self . src = src self . dir = dir self . fname = fname self . sort_by_start = sort_by_start self . x_ticks_num = x_ticks_num self . fig_size = fig_size def plot ( self ) -> None : \"\"\"_summary_ Example: ------- ```python from gantt_helper import GanttHelper gh = GanttHelper('gantt', dir='Images', fname='Gannt', sort_by_start=True, x_ticks_num=10, fig_size=(20, 5)) gh.plot() ``` \"\"\" df , x_ticks_num = self . cleaned_dataframe_data , self . x_ticks_num plt . style . use ( 'fivethirtyeight' ) plt . rcParams [ 'font.sans-serif' ] = [ 'Microsoft JhengHei' ] fig , ax = plt . subplots ( 1 , figsize = self . fig_size ) ax . barh ( df . task , df . current_num , left = df . start_num , color = df . color ) ax . barh ( df . task , df . start_end , left = df . start_num , color = df . color , alpha = 0.5 ) for _ , row in df . iterrows (): ax . text ( row . end_num + df . start_end . max () * 0.01 , row . uid , f \" { int ( row . complete ) } %\" , va = 'center' ) step = ( df . end_num . max () - df . start_num . min ()) / x_ticks_num ax . set_xticks ( np . arange ( 0 , df . end_num . max (), step )) ax . set_xticklabels ( pd . date_range ( df . start . min (), df . end . max (), x_ticks_num ) . strftime ( \"%Y-%m- %d \" ), fontsize = 10 ) plt . title ( f ' { self . fname } ' ) if self . fname : plt . savefig ( self . output_path , bbox_inches = 'tight' ) @property def output_path ( self ): if self . dir : os . makedirs ( self . dir , exist_ok = True ) output_path = f ' { self . dir } / { self . fname } .png' else : output_path = f ' { self . fname } .png' return output_path @property def toml_data ( self ): \"\"\"_summary_ !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Format: ------- ```toml [1] task = 'A' start = 2018-06-27 end = 2018-06-22 complete = 55 ``` \"\"\" return toml . load ( f ' { self . src } .toml' ) @property def raw_dataframe_data ( self ): df = pd . DataFrame ( self . toml_data . values ()) if self . sort_by_start : df = df . sort_values ( by = 'start' ) df = df . reset_index ( drop = True ) return df @property def cleaned_dataframe_data ( self ): df = self . raw_dataframe_data def unique_task_id ( x ): l = df . task . unique () . tolist () return l . index ( x ) df [ 'start_num' ] = df . start - df . start . min () df [ 'start_end' ] = df . end - df . start df [ 'start_num' ] = df . start_num . astype ( 'timedelta64[D]' ) . astype ( int ) df [ 'start_end' ] = df . start_end . astype ( 'timedelta64[D]' ) . astype ( int ) df [ 'end_num' ] = df . start_num + df . start_end df [ 'current_num' ] = ( df . start_end * df . complete / 100 ) df [ 'color' ] = df . complete . apply ( GanttHelper . to_color ) df [ 'uid' ] = df . task . apply ( unique_task_id ) return df @staticmethod def to_color ( x ): if x == 100 : return ( 0.3 , 0.3 , 0.3 , 1 ) elif x < 100 and x > 60 : return ( 0 , 0.5 , 0.3 , x / 100 ) else : return ( 0.7 , 0 , 0 , 0.8 )","title":"Documentation for GanttHelper"},{"location":"#gantt_helper.GanttHelper.__init__","text":"summary Parameters: Name Type Description Default src str Toml file name, without filename extension required dir Union [ str , bool ], optional Ouput file directory, by default False False fname Union [ str , bool ], optional Ouput file name, by default False False sort_by_start bool , optional Sort data by their start date, by default True True x_ticks_num int , optional How many x ticks you want to display, by default 10 10 fig_size tuple , optional Figure size, by default (20, 5) (20, 5) Source code in 2022-python-gantt-chart/gantt_helper.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 def __init__ ( self , src : str , dir : Union [ str , bool ] = False , fname : Union [ str , bool ] = False , sort_by_start : bool = True , x_ticks_num : int = 10 , fig_size : tuple = ( 20 , 5 )) -> None : \"\"\"_summary_ Parameters ---------- src : str Toml file name, without filename extension dir : Union[str, bool], optional Ouput file directory, by default False fname : Union[str, bool], optional Ouput file name, by default False sort_by_start : bool, optional Sort data by their start date, by default True x_ticks_num : int, optional How many x ticks you want to display, by default 10 fig_size : tuple, optional Figure size, by default (20, 5) \"\"\" self . src = src self . dir = dir self . fname = fname self . sort_by_start = sort_by_start self . x_ticks_num = x_ticks_num self . fig_size = fig_size","title":"__init__()"},{"location":"#gantt_helper.GanttHelper.plot","text":"summary","title":"plot()"},{"location":"#gantt_helper.GanttHelper.plot--example","text":"from gantt_helper import GanttHelper gh = GanttHelper ( 'gantt' , dir = 'Images' , fname = 'Gannt' , sort_by_start = True , x_ticks_num = 10 , fig_size = ( 20 , 5 )) gh . plot () Source code in 2022-python-gantt-chart/gantt_helper.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def plot ( self ) -> None : \"\"\"_summary_ Example: ------- ```python from gantt_helper import GanttHelper gh = GanttHelper('gantt', dir='Images', fname='Gannt', sort_by_start=True, x_ticks_num=10, fig_size=(20, 5)) gh.plot() ``` \"\"\" df , x_ticks_num = self . cleaned_dataframe_data , self . x_ticks_num plt . style . use ( 'fivethirtyeight' ) plt . rcParams [ 'font.sans-serif' ] = [ 'Microsoft JhengHei' ] fig , ax = plt . subplots ( 1 , figsize = self . fig_size ) ax . barh ( df . task , df . current_num , left = df . start_num , color = df . color ) ax . barh ( df . task , df . start_end , left = df . start_num , color = df . color , alpha = 0.5 ) for _ , row in df . iterrows (): ax . text ( row . end_num + df . start_end . max () * 0.01 , row . uid , f \" { int ( row . complete ) } %\" , va = 'center' ) step = ( df . end_num . max () - df . start_num . min ()) / x_ticks_num ax . set_xticks ( np . arange ( 0 , df . end_num . max (), step )) ax . set_xticklabels ( pd . date_range ( df . start . min (), df . end . max (), x_ticks_num ) . strftime ( \"%Y-%m- %d \" ), fontsize = 10 ) plt . title ( f ' { self . fname } ' ) if self . fname : plt . savefig ( self . output_path , bbox_inches = 'tight' )","title":"Example:"},{"location":"#gantt_helper.GanttHelper.toml_data","text":"summary Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"toml_data()"},{"location":"#gantt_helper.GanttHelper.toml_data--format","text":"[ 1 ] task = 'A' start = 2018-06-27 end = 2018-06-22 complete = 55 Source code in 2022-python-gantt-chart/gantt_helper.py 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 @property def toml_data ( self ): \"\"\"_summary_ !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Format: ------- ```toml [1] task = 'A' start = 2018-06-27 end = 2018-06-22 complete = 55 ``` \"\"\" return toml . load ( f ' { self . src } .toml' )","title":"Format:"}]}